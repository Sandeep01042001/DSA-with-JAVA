/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if(root == null){
            return new ArrayList<>();
        }
        LinkedList<TreeNode> q = new LinkedList<>();
        q.addLast(root);
        int level = 1;
        List<List<Integer>> list = new ArrayList<>();
        Stack<Integer> st = new Stack<>();
        while(q.size()>0){
            int size = q.size();
            List<Integer> li = new ArrayList<>();
            while(size-- > 0){
               TreeNode rem = q.removeFirst();
               if(level % 2 == 0){
                  st.push(rem.val);
               }else{
                  li.add(rem.val);
               }
               if(rem.left != null){
                 q.addLast(rem.left);
               }
               if(rem.right != null){
                 q.addLast(rem.right);
               }
            }
            if(level % 2 != 0){
                list.add(li);
            }
            if(st.size() > 0){
                List<Integer> li2 = new ArrayList<>();
                while(st.size()>0){
                   li2.add(st.pop());
                }
                list.add(li2);
            }
            level++;
        }
        return list;
    }
}
